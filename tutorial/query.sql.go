// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers (
    full_name, phone_number, email, permanent_address, license_number, license_valid_until, is_available, is_active
    ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8
    ) RETURNING id, full_name, phone_number, email, permanent_address, license_number, license_valid_until, primary_alert, is_available, is_active, created_at
`

type CreateDriverParams struct {
	FullName          string
	PhoneNumber       string
	Email             string
	PermanentAddress  string
	LicenseNumber     string
	LicenseValidUntil pgtype.Date
	IsAvailable       bool
	IsActive          bool
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRow(ctx, createDriver,
		arg.FullName,
		arg.PhoneNumber,
		arg.Email,
		arg.PermanentAddress,
		arg.LicenseNumber,
		arg.LicenseValidUntil,
		arg.IsAvailable,
		arg.IsActive,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.PermanentAddress,
		&i.LicenseNumber,
		&i.LicenseValidUntil,
		&i.PrimaryAlert,
		&i.IsAvailable,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
DELETE FROM drivers 
WHERE email = $1
`

func (q *Queries) DeleteDriver(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteDriver, email)
	return err
}

const driverList = `-- name: DriverList :many
SELECT id, full_name, phone_number, email, permanent_address, license_number, license_valid_until, primary_alert, is_available, is_active, created_at FROM drivers 
ORDER BY full_name
`

func (q *Queries) DriverList(ctx context.Context) ([]Driver, error) {
	rows, err := q.db.Query(ctx, driverList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Driver
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.PermanentAddress,
			&i.LicenseNumber,
			&i.LicenseValidUntil,
			&i.PrimaryAlert,
			&i.IsAvailable,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDriver = `-- name: GetDriver :one
SELECT id, full_name, phone_number, email, permanent_address, license_number, license_valid_until, primary_alert, is_available, is_active, created_at FROM drivers 
WHERE email = $1
`

func (q *Queries) GetDriver(ctx context.Context, email string) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriver, email)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.PermanentAddress,
		&i.LicenseNumber,
		&i.LicenseValidUntil,
		&i.PrimaryAlert,
		&i.IsAvailable,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateDriver = `-- name: UpdateDriver :exec
UPDATE drivers SET 
    full_name = $1, phone_number = $2, permanent_address = $4, license_number = $5, license_valid_until = $6, is_available = $7, is_active = $8 
    WHERE email = $3
`

type UpdateDriverParams struct {
	FullName          string
	PhoneNumber       string
	Email             string
	PermanentAddress  string
	LicenseNumber     string
	LicenseValidUntil pgtype.Date
	IsAvailable       bool
	IsActive          bool
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) error {
	_, err := q.db.Exec(ctx, updateDriver,
		arg.FullName,
		arg.PhoneNumber,
		arg.Email,
		arg.PermanentAddress,
		arg.LicenseNumber,
		arg.LicenseValidUntil,
		arg.IsAvailable,
		arg.IsActive,
	)
	return err
}
